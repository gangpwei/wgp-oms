#垂直分表策略
# 配置真实数据源
spring.shardingsphere.datasource.names=m1

# 配置第 1 个数据源
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/oms?serverTimezone=UTC
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=12345678

# 指定表的分布情况 配置表在哪个数据库里，表名是什么。水平分表，分两个表：m1.order_1,m1.order_2
spring.shardingsphere.sharding.tables.order.actual-data-nodes=m1.order_$->{1..2}

# 指定表的主键生成策略
spring.shardingsphere.sharding.tables.order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.order.key-generator.type=SNOWFLAKE
#雪花算法的一个可选参数
#spring.shardingsphere.sharding.tables.order.key-generator.props.worker.id=1

#使用自定义的主键生成策略
#spring.shardingsphere.sharding.tables.order.key-generator.type=MYKEY
#spring.shardingsphere.sharding.tables.order.key-generator.props.mykey-offset=88

#指定分片策略 约定order_id值为偶数添加到order_1表。如果是奇数添加到order_2表。
# 选定计算的字段ff
spring.shardingsphere.sharding.tables.order.table-strategy.inline.sharding-column=order_id
# 根据计算的字段算出对应的表名。
spring.shardingsphere.sharding.tables.order.table-strategy.standard..precise-algorithm-class-name=inline.algorithm-expression=order_$->{order_id%2+1}

# 打开sql日志输出。
spring.shardingsphere.props.sql.show=true

spring.main.allow-bean-definition-overriding=true